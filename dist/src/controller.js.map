{"version":3,"sources":["src/controller.js"],"names":["controller","injectorContextTypes","mobxStores","objectOrObservableObject","Object","seal","proxiedInjectorProps","contextTypes","get","set","_","console","warn","configurable","enumerable","isMobxInjector","value","writable","createStoreInjector","ctrlName","Ctrl","component","mapper","displayName","name","constructor","Injector","storeRef","wrappedInstance","instance","context","$destroy","newProps","key","props","hasOwnProperty","additionalProps","ref","createElement","wrappedComponent","defineProperties","getWrapper","ComponentClass","MyWrapper","stores","Component","componentClass"],"mappings":";;;;;;;;kBAmGwBA,U;;AAlGxB;;;;AACA;;;;AACA;;AACA;;;;;;;;+eAJA;;;AAOA,IAAMC,uBAAuB;AAC3BC,cAAY,qBAAUC;AADK,CAA7B;AAGAC,OAAOC,IAAP,CAAYJ,oBAAZ;;AAEA,IAAMK,uBAAuB;AAC3BC,gBAAc;AACZC,OADY,iBACN;AACJ,aAAOP,oBAAP;AACD,KAHW;AAIZQ,OAJY,eAIRC,CAJQ,EAIL;AACLC,cAAQC,IAAR,CAAa,uOAAb;AACD,KANW;;AAOZC,kBAAc,IAPF;AAQZC,gBAAY;AARA,GADa;AAW3BC,kBAAgB;AACdC,WAAO,IADO;AAEdC,cAAU,IAFI;AAGdJ,kBAAc,IAHA;AAIdC,gBAAY;AAJE;AAXW,CAA7B;;AAmBA;;;AAGA,SAASI,mBAAT,CAA6BC,QAA7B,EAAuCC,IAAvC,EAA6CC,SAA7C,EAAwDC,MAAxD,EAAgE;AAAA;;AAC9D,MAAMC,cAAc,aAAaF,UAAUE,WAAV,IAAyBF,UAAUG,IAAnC,IAA4CH,UAAUI,WAAV,IAAyBJ,UAAUI,WAAV,CAAsBD,IAA3F,IAAoG,SAAjH,CAApB;;AAD8D,MAGxDE,QAHwD;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA,4LAO5DC,QAP4D,GAOjD,oBAAY;AACrB,cAAKC,eAAL,GAAuBC,QAAvB;AACD,OAT2D;AAAA;;AAAA;AAAA;AAAA,2CAWvC;AACnB,aAAK7B,UAAL,GAAkB,IAAIoB,IAAJ,CAAS,KAAKU,OAAL,CAAa5B,UAAtB,CAAlB;AACD;AAb2D;AAAA;AAAA,6CAerC;AACrB,YAAG,KAAKF,UAAL,CAAgB+B,QAAnB,EAA4B;AAC1B,eAAK/B,UAAL,CAAgB+B,QAAhB;AACD;AACD,aAAK/B,UAAL,GAAkB,IAAlB;AACD;AApB2D;AAAA;AAAA,+BAsBnD;AACP;AACA;AACA;AACA,YAAMgC,WAAW,EAAjB;AACA,aAAK,IAAMC,GAAX,IAAkB,KAAKC,KAAvB,EAA8B;AAC5B,cAAI,KAAKA,KAAL,CAAWC,cAAX,CAA0BF,GAA1B,CAAJ,EAAoC;AAClCD,qBAASC,GAAT,IAAgB,KAAKC,KAAL,CAAWD,GAAX,CAAhB;AACD;AACF;AACD,YAAIG,kBAAkB,EAAtB;;AAEA,YAAG,OAAOd,MAAP,KAAkB,UAArB,EAAgC;AAC9Bc,4BAAkBd,OAAO,KAAKtB,UAAZ,EAAwB,KAAKkC,KAA7B,CAAlB;AACD,SAFD,MAEK;AACHE,4BAAkB,CAAC,KAAKN,OAAL,CAAa5B,UAAb,IAA2B,EAA3B,EAA+B8B,QAA/B,EAAyC,KAAKF,OAA/C,KAA2D,EAA7E;AACAM,0BAAgBjB,QAAhB,IAA4B,KAAKnB,UAAjC;AACD;;AAED,aAAK,IAAMiC,KAAX,IAAkBG,eAAlB,EAAmC;AACjCJ,mBAASC,KAAT,IAAgBG,gBAAgBH,KAAhB,CAAhB;AACD;AACDD,iBAASK,GAAT,GAAe,KAAKV,QAApB;;AAEA,eAAO,gBAAMW,aAAN,CAAoB,yBAASjB,SAAT,CAApB,EAAyCW,QAAzC,CAAP;AACD;AA/C2D;;AAAA;AAAA,8BAKrDT,WALqD,GAKvCA,WALuC;;AAkD9D;;AACA,sCAAaG,QAAb,EAAuBL,SAAvB;;AAEAK,WAASa,gBAAT,GAA4BlB,SAA5B;AACAjB,SAAOoC,gBAAP,CAAwBd,QAAxB,EAAkCpB,oBAAlC;;AAEA,SAAOoB,QAAP;AACD;;AAED;;;;;;AAMe,SAAS1B,UAAT,CAAoBmB,QAApB,EAA8BC,IAA9B,EAAoCE,MAApC,EAA4C;;AAGzD,WAASmB,UAAT,CAAoBC,cAApB,EAAmC;AAAA,QAC3BC,SAD2B;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6CAGX;AAClB,eAAK3C,UAAL,GAAkB,IAAIoB,IAAJ,CAAS,KAAKc,KAAL,CAAWU,MAAX,CAAkBA,MAA3B,CAAlB;AACD;AAL8B;AAAA;AAAA,iCAMvB;AACN;AACF,cAAMZ,WAAW,EAAjB;AACA,eAAK,IAAMC,GAAX,IAAkB,KAAKC,KAAvB,EAA8B;AAC5B,gBAAI,KAAKA,KAAL,CAAWC,cAAX,CAA0BF,GAA1B,CAAJ,EAAoC;AAClCD,uBAASC,GAAT,IAAgB,KAAKC,KAAL,CAAWD,GAAX,CAAhB;AACD;AACF;AACDD,mBAASb,QAAT,IAAqB,KAAKnB,UAA1B;AACA,iBAAO,gBAAMsC,aAAN,CAAoBI,cAApB,EAAoCV,QAApC,CAAP;AAEC;AAjB8B;;AAAA;AAAA,MACT,gBAAMa,SADG;;AAmBjC,WAAO,UAACD,MAAD,EAAW;AAChB,aAAO;AAAC,iBAAD;AAAA,UAAW,QAAQA,MAAnB;AAA2B,sCAAC,cAAD;AAA3B,OAAP;AACD,KAFD;AAGD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAO,UAAUE,cAAV,EAA0B;AAC/B,WAAO,uBAAO,kBAAU;AACtB,aAAO,EAACF,cAAD,EAAP;AACD,KAFM,EAEJH,WAAWK,cAAX,CAFI,CAAP;AAGA;AACD,GALD;AAOD","file":"controller.js","sourcesContent":["/* eslint-disable */\nimport React, {Component} from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport {reaction, autorun} from 'mobx';\nimport {PropTypes, observer, inject} from 'mobx-react';\n\n\nconst injectorContextTypes = {\n  mobxStores: PropTypes.objectOrObservableObject\n};\nObject.seal(injectorContextTypes);\n\nconst proxiedInjectorProps = {\n  contextTypes: {\n    get() {\n      return injectorContextTypes;\n    },\n    set(_) {\n      console.warn('Mobx Injector: you are trying to attach `contextTypes` on an component decorated with `inject` (or `observer`) HOC. Please specify the contextTypes on the wrapped component instead. It is accessible through the `wrappedComponent`');\n    },\n    configurable: true,\n    enumerable: false\n  },\n  isMobxInjector: {\n    value: true,\n    writable: true,\n    configurable: true,\n    enumerable: true\n  }\n};\n\n/**\n * Store Injection\n */\nfunction createStoreInjector(ctrlName, Ctrl, component, mapper) {\n  const displayName = 'inject-' + (component.displayName || component.name || (component.constructor && component.constructor.name) || 'Unknown');\n\n  class Injector extends Component {\n\n    static displayName = displayName;\n    controller;\n    storeRef = instance => {\n      this.wrappedInstance = instance;\n    };\n\n    componentWillMount() {\n      this.controller = new Ctrl(this.context.mobxStores);\n    }\n\n    componentWillUnmount() {\n      if(this.controller.$destroy){\n        this.controller.$destroy()\n      }\n      this.controller = null;\n    }\n\n    render() {\n      // Optimization: it might be more efficient to apply the mapper function *outside* the render method\n      // (if the mapper is a function), that could avoid expensive(?) re-rendering of the injector component\n      // See this test: 'using a custom injector is not too reactive' in inject.js\n      const newProps = {};\n      for (const key in this.props) {\n        if (this.props.hasOwnProperty(key)) {\n          newProps[key] = this.props[key];\n        }\n      }\n      let additionalProps = {};\n      \n      if(typeof mapper === 'function'){\n        additionalProps = mapper(this.controller, this.props);\n      }else{\n        additionalProps = (this.context.mobxStores || {}, newProps, this.context) || {};\n        additionalProps[ctrlName] = this.controller;\n      }\n\n      for (const key in additionalProps) {\n        newProps[key] = additionalProps[key];\n      }\n      newProps.ref = this.storeRef;\n\n      return React.createElement(observer(component), newProps);\n    }\n  }\n\n  // Static fields from component should be visible on the generated Injector\n  hoistStatics(Injector, component);\n\n  Injector.wrappedComponent = component;\n  Object.defineProperties(Injector, proxiedInjectorProps);\n\n  return Injector;\n}\n\n/**\n * higher order component that injects stores to a child.\n * takes either a varargs list of strings, which are stores read from the context,\n * or a function that manually maps the available stores from the context to props:\n * storesToProps(mobxStores, props, context) => newProps\n */\nexport default function controller(ctrlName, Ctrl, mapper) {\n\n\n  function getWrapper(ComponentClass){\n    class MyWrapper extends React.Component{\n      controller;\n      componentWillMount(){\n        this.controller = new Ctrl(this.props.stores.stores);\n      }\n      render(){\n        // console.log(this.props.stores)\n      const newProps = {};\n      for (const key in this.props) {\n        if (this.props.hasOwnProperty(key)) {\n          newProps[key] = this.props[key];\n        }\n      }\n      newProps[ctrlName] = this.controller;\n      return React.createElement(ComponentClass, newProps);\n      \n      }\n    }    \n    return (stores)=> {\n      return <MyWrapper stores={stores}><ComponentClass/></MyWrapper>\n    }\n  }\n\n  // return inject((stores) => {\n  //   if(typeof mapper === 'function'){\n  //     return mapper()\n  //   }\n  //   return {\n  //     [ctrlName]: new Ctrl(stores)\n  //   }\n  // })\n  return function (componentClass) {\n    return inject(stores => {\n      return {stores}\n    })(getWrapper(componentClass))\n    // return createStoreInjector(ctrlName, Ctrl, componentClass, mapper);\n  };\n\n}\n"]}